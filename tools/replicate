#!/usr/bin/env python

import os
import aenet.AenetLab as AL
from ase.io import read
from ase.io.lammpsdata import write_lammps_data
from aenet.AenetLab.aenet_io import aread
import json
import argparse

parser = argparse.ArgumentParser(
        description="""Quick creation by repeating(replicating) simulation box from files in different formats""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--source','-s',metavar='S',required=True,help="Source file(dir) name")
parser.add_argument('--target','-t',metavar='T',help="Target dir name")
parser.add_argument('--specorder','-sp',nargs='+',help="A list of elements whose indexs are consistent with the lammps number. e.g. ['Cu','Zr'] means Cu : 1, Zr : 2")
parser.add_argument('--rep','-r',metavar='R',required=True,type=int,nargs='+',help="repeat argument should be a sequence with three positive integers like '-r 2 3 1')")
args = parser.parse_args()

s_path = args.source
if not args.target:
    t_path = ''
else:
    t_path = args.target
    if not os.path.exists(t_path):
        os.makedirs(t_path)

if not args.specorder:
    Njson = 0
    for na in os.listdir(os.getcwd()):
        if na.split('.')[-1] == 'json':
            Njson += 1
            json_name = na
    if Njson != 1:
        raise Exception("AenetLab can only read one json file")
    with open(json_name,'r') as f:
        textjson = json.load(f)
        aelab = AL.AenetLab(textjson)
        Z_of_type = aelab.Z_of_type
        specorder = aelab.specorder
else:
    Z_of_type = {}
    for ind, elem in enumerate(args.specorder):
        Z_of_type[ind+1] = elem
    specorder = args.specorder

rx = ''.join([str(i) for i in args.rep])
if os.path.isdir(s_path):
    for na in os.listdir(s_path):
        init_file = os.path.join(s_path,na)
        a, tag = aread(init_file,Z_of_type,index_list='default')
        a_new=a.repeat(args.rep)
        ft = open(os.path.join(t_path,'replicate-'+rx+tag+'.data'),'w')
        write_lammps_data(ft,a_new,specorder=specorder)
        ft.close()
    print("Replication done")
elif os.path.exists(s_path) and not os.path.isdir(s_path):
    a, tag = aread(s_path,Z_of_type,index_list='default')
    a_new=a.repeat(args.rep)
    ft = open(os.path.join(t_path,'replicate-'+rx+tag+'.data'),'w')
    write_lammps_data(ft,a_new,specorder=specorder)
    ft.close()
    print("Replication done")
else:
    raise FileNotFoundError("No such file or directory: '%s'"%s_path)


